version: '3.8'

# Сеть для изоляции сервисов (такая же как в БД для взаимодействия)
networks:
  smartlb-network:
    driver: bridge
    external: true  # Используем существующую сеть из db compose

# Volumes для персистентности данных
volumes:
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local
  kafka-logs:
    driver: local

services:
  # Zookeeper - координация Kafka кластера
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: smartlb-zookeeper
    restart: unless-stopped
    
    # Порт маппинг
    ports:
      - "2181:2181"
    
    # Переменные окружения
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 1
    
    # Volumes для данных
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-data:/var/lib/zookeeper/log
      - ./deployment/kafka/zookeeper-log4j.properties:/etc/kafka/log4j.properties:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "bash", "-c", "echo stat | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    
    # Настройки ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    
    # Сеть
    networks:
      - smartlb-network
    
    # Логирование
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka брокер
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: smartlb-kafka
    restart: unless-stopped
    
    # Порт маппинг
    ports:
      - "9092:9092"
      - "29092:29092"  # Internal listener for other containers
    
    # Переменные окружения
    environment:
      # Basic configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      
      # Listeners configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Performance and reliability
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      
      # Log and retention settings
      KAFKA_LOG_RETENTION_HOURS: 168        # 7 days
      KAFKA_LOG_RETENTION_BYTES: 5368709120 # 5GB
      KAFKA_LOG_SEGMENT_BYTES: 1073741824   # 1GB
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      
      # Memory and performance
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
      KAFKA_MESSAGE_MAX_BYTES: 10485760     # 10MB
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_MAX_REQUEST_SIZE: 10485760
      
      # Security and monitoring
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      
      # Metric settings for our use case
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_REPLICA_FETCHERS: 1
    
    # Volumes для данных
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-logs:/opt/kafka/logs
      - ./deployment/kafka/kafka-log4j.properties:/etc/kafka/log4j.properties:ro
      - ./deployment/kafka/create-topics.sh:/usr/bin/create-topics.sh:ro
    
    # Health check - проверяем что Kafka отвечает
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    
    # Зависит от готовности Zookeeper
    depends_on:
      zookeeper:
        condition: service_healthy
    
    # Настройки ресурсов
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    
    # Сеть
    networks:
      - smartlb-network
    
    # Логирование
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka UI для администрирования и мониторинга
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: smartlb-kafka-ui
    restart: unless-stopped
    
    # Порт маппинг
    ports:
      - "8083:8080"
    
    # Переменные окружения
    environment:
      # Подключение к Kafka кластеру
      KAFKA_CLUSTERS_0_NAME: "SmartLB Kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:29092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      
      # Настройки UI
      KAFKA_CLUSTERS_0_READONLY: "false"
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "PLAINTEXT"
      
      # Дополнительные настройки
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_PROPERTIES_REQUEST_TIMEOUT_MS: 30000
      
      # Настройки приложения
      SERVER_SERVLET_CONTEXT_PATH: "/"
      LOGGING_LEVEL_COM_PROVECTUS: "INFO"
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Зависит от готовности Kafka
    depends_on:
      kafka:
        condition: service_healthy
    
    # Настройки ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    
    # Сеть
    networks:
      - smartlb-network
    
    # Логирование
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka Connect для интеграций (опционально)
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: smartlb-kafka-connect
    restart: unless-stopped
    
    # Порт маппинг
    ports:
      - "8084:8084"
    
    # Переменные окружения
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_GROUP_ID: "smartlb-connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
      
      # Performance settings
      CONNECT_TASK_SHUTDOWN_GRACEFUL_TIMEOUT_MS: 10000
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_FLUSH_TIMEOUT_MS: 10000
      CONNECT_HEAP_OPTS: "-Xmx256M -Xms128M"
    
    # Volumes для коннекторов
    volumes:
      - ./deployment/kafka/connectors:/etc/kafka-connect/jars:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/connectors"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    
    # Зависит от готовности Kafka
    depends_on:
      kafka:
        condition: service_healthy
    
    # Настройки ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    
    # Сеть
    networks:
      - smartlb-network
    
    # Логирование
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
