[versions]
# Build tools
gradle = "8.5"
java = "17"

# Application frameworks
spring-boot = "3.2.0"
micronaut = "4.2.1"

# Networking
netty = "4.1.100.Final"
grpc = "1.59.0"
protobuf = "3.25.1"

# Metrics and monitoring
micrometer = "1.11.5"
prometheus = "0.16.0"

# Messaging
kafka = "3.6.0"
kafka-streams = "3.6.0"

# Database
postgresql = "42.6.0"
timescaledb = "2.13.0"
hikari = "5.1.0"

# JSON
jackson = "2.15.3"

# Testing
junit = "5.10.0"
mockito = "5.5.0"
assertj = "3.24.2"
testcontainers = "1.19.3"

# Utilities
slf4j = "2.0.9"
logback = "1.4.11"

[libraries]
# Spring Boot
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot" }

# Micronaut
micronaut-inject = { module = "io.micronaut:micronaut-inject", version.ref = "micronaut" }
micronaut-http = { module = "io.micronaut:micronaut-http", version.ref = "micronaut" }
micronaut-validation = { module = "io.micronaut:micronaut-validation", version.ref = "micronaut" }

# Networking
netty-all = { module = "io.netty:netty-all", version.ref = "netty" }

# gRPC
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }

# Metrics
micrometer-core = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
prometheus-metrics = { module = "io.prometheus:prometheus-metrics-core", version.ref = "prometheus" }

# Kafka
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka-streams" }

# Database
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }

# JSON
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }

# Testing
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

# Utilities
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

[bundles]
# Common bundles
spring-boot-starter = ["spring-boot-starter", "spring-boot-starter-web", "spring-boot-starter-actuator"]
testing = ["junit-jupiter", "mockito-junit-jupiter", "assertj-core"]
grpc = ["grpc-protobuf", "grpc-stub", "grpc-netty"]
kafka = ["kafka-clients", "kafka-streams"]
metrics = ["micrometer-core", "micrometer-registry-prometheus"]
logging = ["slf4j-api", "logback-classic"]

[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version = "1.1.4" }
micronaut-application = { id = "io.micronaut.application", version.ref = "micronaut" }
grpc = { id = "com.google.protobuf", version.ref = "protobuf" }
