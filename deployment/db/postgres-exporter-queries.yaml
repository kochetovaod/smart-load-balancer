# Custom queries for Smart Load Balancer metrics monitoring

pg_class:
  query: |
    SELECT
      schemaname,
      relname,
      seq_scan,
      seq_tup_read,
      idx_scan,
      idx_tup_fetch,
      n_tup_ins,
      n_tup_upd,
      n_tup_del,
      n_tup_hot_upd,
      n_live_tup,
      n_dead_tup
    FROM pg_stat_user_tables
  metrics:
    - schemaname:
        usage: "LABEL"
        description: "Schema name"
    - relname:
        usage: "LABEL"
        description: "Table name"
    - seq_scan:
        usage: "COUNTER"
        description: "Number of sequential scans"
    - seq_tup_read:
        usage: "COUNTER"
        description: "Number of tuples read by sequential scans"
    - idx_scan:
        usage: "COUNTER"
        description: "Number of index scans"
    - idx_tup_fetch:
        usage: "COUNTER"
        description: "Number of tuples fetched by index scans"
    - n_tup_ins:
        usage: "COUNTER"
        description: "Number of tuples inserted"
    - n_tup_upd:
        usage: "COUNTER"
        description: "Number of tuples updated"
    - n_tup_del:
        usage: "COUNTER"
        description: "Number of tuples deleted"
    - n_tup_hot_upd:
        usage: "COUNTER"
        description: "Number of HOT updated tuples"
    - n_live_tup:
        usage: "GAUGE"
        description: "Estimated number of live tuples"
    - n_dead_tup:
        usage: "GAUGE"
        description: "Estimated number of dead tuples"

lb_metrics_stats:
  query: |
    SELECT
      'service_metrics' as metric_name,
      COUNT(*) as row_count,
      EXTRACT(EPOCH FROM NOW() - MIN(time)) as oldest_data_seconds
    FROM lb_metrics.service_metrics
    UNION ALL
    SELECT
      'health_status' as metric_name,
      COUNT(*) as row_count,
      EXTRACT(EPOCH FROM NOW() - MIN(time)) as oldest_data_seconds
    FROM lb_metrics.health_status
  metrics:
    - metric_name:
        usage: "LABEL"
        description: "Metric table name"
    - row_count:
        usage: "GAUGE"
        description: "Number of rows in metric table"
    - oldest_data_seconds:
        usage: "GAUGE"
        description: "Age of oldest data in seconds"

active_services:
  query: |
    SELECT
      service_id,
      COUNT(DISTINCT instance_id) as active_instances,
      AVG(rps) as avg_rps,
      AVG(p95_latency) as avg_latency,
      AVG(error_rate) as avg_error_rate
    FROM lb_metrics.service_metrics
    WHERE time > NOW() - INTERVAL '5 minutes'
    GROUP BY service_id
  metrics:
    - service_id:
        usage: "LABEL"
        description: "Service identifier"
    - active_instances:
        usage: "GAUGE"
        description: "Number of active instances"
    - avg_rps:
        usage: "GAUGE"
        description: "Average requests per second"
    - avg_latency:
        usage: "GAUGE"
        description: "Average latency in milliseconds"
    - avg_error_rate:
        usage: "GAUGE"
        description: "Average error rate"
